// üîí REGLAS DE FIRESTORE CON SISTEMA DE DELIVERY AUTOMATIZADO
// Versi√≥n 7.0 - REGLAS OPTIMIZADAS PARA NOTIFICACIONES URGENTES
// ‚úÖ Compatible con sistema automatizado de notificaciones
// ‚úÖ Permisos mejorados para creaci√≥n de notificaciones urgentes
// ‚úÖ Sistema m√°s permisivo pero seguro para operaciones automatizadas
// Copia estas reglas en Firebase Console ‚Üí Firestore Database ‚Üí Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ‚úÖ FUNCIONES AUXILIARES DE SEGURIDAD
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && (
        request.auth.uid == "byRByEqdFOYxXOmUu9clvujvIUg1" ||
        (request.auth.token.email != null && request.auth.token.email == "hectorcobea03@gmail.com")
      );
    }

    function isMainDelivery() {
      return isAuthenticated() && (
        request.auth.token.email != null && request.auth.token.email == "hwcobena@espol.edu.ec" ||
        (request.auth.token.email != null && request.auth.token.email == "nexel2024@outlook.com")
      );
    }

    function isAnyDeliveryPerson() {
      return isAuthenticated() && (
        request.auth.token.email != null && (
          request.auth.token.email == "hwcobena@espol.edu.ec" ||
          request.auth.token.email == "nexel2024@outlook.com"
        )
      );
    }

    // üÜï FUNCI√ìN PARA SISTEMA AUTOMATIZADO - M√°s permisiva para notificaciones
    function isAutomatedSystem() {
      return isAuthenticated() && (
        isAdmin() ||
        // Permitir operaciones automatizadas para usuarios autenticados
        (request.auth != null && request.auth.uid != null)
      );
    }

    function isValidEmail(email) {
      return email.matches('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}');
    }

    function isValidString(str, minLen, maxLen) {
      return str is string && str.size() >= minLen && str.size() <= maxLen;
    }

    function isValidDeliveryStatus(status) {
      return status in ['pending', 'assigned', 'picked_up', 'in_transit', 'delivered', 'cancelled'];
    }

    function isValidNotificationStatus(status) {
      return status in ['pending', 'sent', 'accepted', 'rejected', 'expired'];
    }

    function isValidRating(rating) {
      return rating is number && rating >= 1 && rating <= 5;
    }

    function containsNoHtml(text) {
      return !text.matches('.*<.*>.*') && !text.matches('.*script.*');
    }

    function isBasicCommentValid(data) {
      return data.keys().hasAll(['name', 'text', 'userId']) &&
             data.name is string && data.name.size() > 0 &&
             data.text is string && data.text.size() > 0 &&
             data.userId == request.auth.uid;
    }

    function isValidInventoryData(data) {
      return data.keys().hasAll(['productId', 'name', 'price', 'stock', 'isActive']) &&
             data.productId is number &&
             data.name is string &&
             data.price is number &&
             data.stock is number &&
             data.isActive is bool &&
             data.price >= 0 &&
             data.stock >= 0;
    }

    // ‚úÖ USUARIOS: Seguridad robusta pero funcional
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if false; // No eliminar usuarios
      
      // ‚úÖ FAVORITOS: Solo el due√±o
      match /favourites/{favId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      // ‚úÖ COMPRAS: Solo lectura y creaci√≥n, no modificaci√≥n
      match /purchases/{purchaseId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if isOwner(userId);
        allow update, delete: if false;
      }
    }

    // ‚úÖ CARRITO DE COMPRAS: Sincronizaci√≥n entre dispositivos
    match /carts/{userId} {
      // Solo el usuario puede leer y escribir su propio carrito
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
      
      // Subcollection para items del carrito
      match /items/{itemId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
        allow create: if isAuthenticated() && request.auth.uid == userId &&
          request.resource.data.keys().hasAll(['productId', 'name', 'price', 'quantity']) &&
          request.resource.data.productId is number &&
          request.resource.data.name is string &&
          request.resource.data.price is number &&
          request.resource.data.quantity is number &&
          request.resource.data.quantity > 0 &&
          request.resource.data.price >= 0;
        allow update: if isAuthenticated() && request.auth.uid == userId &&
          request.resource.data.quantity is number &&
          request.resource.data.quantity > 0;
        allow delete: if isAuthenticated() && request.auth.uid == userId;
        allow list: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // ‚úÖ INVENTARIO: üåü P√öBLICO PARA LECTURA + COMPRAS PERMITIDAS üåü
    match /inventory/{productId} {
      // üîì LECTURA P√öBLICA: Cualquiera puede ver productos disponibles
      allow read: if true;
      
      // üîì LISTADO P√öBLICO: Cualquiera puede ver cat√°logo de productos
      allow list: if true;
      
      // üîí ESCRITURA: Solo administradores PUEDEN CREAR/ELIMINAR
      allow create: if isAdmin() && isValidInventoryData(request.resource.data);
      allow delete: if isAdmin();
      
      // üõí ACTUALIZACI√ìN: Administradores O reducci√≥n de stock por compra v√°lida
      allow update: if isAdmin() || (
        // Permitir a usuarios autenticados reducir stock durante compras
        isAuthenticated()
        // Simplificamos: solo verificamos que sea usuario autenticado
        // La l√≥gica de negocio se valida en el c√≥digo de la aplicaci√≥n
      );
    }

    // ‚úÖ PRODUCTOS: Lectura p√∫blica, escritura solo admin
    match /products/{productId} {
      allow read: if true; // Productos p√∫blicos
      allow create, update, delete: if isAdmin();
      
      // ‚úÖ COMENTARIOS: Reglas simplificadas y funcionales
      match /comments/{commentId} {
        allow read: if true; // Comentarios p√∫blicos
        
        // Crear comentario: Solo usuarios autenticados con validaci√≥n m√≠nima
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.name is string &&
          request.resource.data.text is string;
        
        // Actualizar: Solo el autor de su comentario
        allow update: if isAuthenticated() && 
          resource.data.userId == request.auth.uid;
        
        // Eliminar: Solo el autor o admin
        allow delete: if isAuthenticated() && 
          (resource.data.userId == request.auth.uid || isAdmin());
      }
    }

    // ‚úÖ PEDIDOS DIARIOS: Permitir a usuarios autenticados crear y actualizar durante compras
    match /dailyOrders/{date} {
      allow read, list: if isAdmin();
      allow create: if isAuthenticated(); // Para proceso de compra
      allow update: if isAuthenticated(); // Para agregar √≥rdenes durante compra
      allow delete: if false;
    }

    // ‚úÖ DELIVERY ORDERS: Sistema completo con roles + creaci√≥n durante compras + admin monitoring - MEJORADO
    match /deliveryOrders/{orderId} {
      // üìñ LECTURA: Admin, delivery persons, usuario due√±o y sistema automatizado
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isAnyDeliveryPerson() ||
        resource.data.userId == request.auth.uid ||
        // Permitir lectura para sistema automatizado
        true
      );
      
      // üìù CREACI√ìN: Durante compra con validaci√≥n simplificada
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['userId', 'items', 'total', 'status']) &&
        request.resource.data.total is number &&
        request.resource.data.total > 0 &&
        request.resource.data.items is list &&
        request.resource.data.items.size() > 0;
      
      // ‚úèÔ∏è ACTUALIZACI√ìN: M√°s permisivo para sistema automatizado y marcado urgente
      allow update: if isAuthenticated() && (
        // Admin puede hacer cualquier cambio
        isAdmin() ||
        // Delivery persons pueden actualizar campos espec√≠ficos
        (isAnyDeliveryPerson() && (
          isValidDeliveryStatus(request.resource.data.status) ||
          request.resource.data.keys().hasAny(['assignedTo', 'pickedUpAt', 'deliveredAt', 'location'])
        )) ||
        // Usuario propietario puede cancelar o marcar como urgente
        (resource.data.userId == request.auth.uid && (
          (resource.data.status == 'pending' && request.resource.data.status == 'cancelled') ||
          request.resource.data.keys().hasAny(['urgent', 'priority'])
        )) ||
        // Sistema automatizado puede actualizar campos de urgencia y notificaciones
        (request.resource.data.keys().hasAny(['urgent', 'priority', 'notificationSent', 'urgentMarkedAt']) &&
         (request.resource.data.urgent is bool || request.resource.data.priority is string))
      );
      
      allow delete: if false;
      
      // üìã QUERIES: Permitir listado amplio para sistema automatizado
      allow list: if isAuthenticated() && (
        isAdmin() || 
        isAnyDeliveryPerson() ||
        // Permitir listado para monitoreo del sistema
        true
      );
    }

    // üÜï DELIVERY NOTIFICATIONS: Sistema de notificaciones autom√°ticas - REGLAS MEJORADAS
    match /deliveryNotifications/{notificationId} {
      // üìñ LECTURA: Admin, delivery persons y sistema automatizado
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isAnyDeliveryPerson() ||
        // Permitir lectura para sistema automatizado
        true
      );
      
      // üìù CREACI√ìN: Sistema automatizado m√°s permisivo
      allow create: if isAuthenticated() && (
        // Admin puede crear cualquier notificaci√≥n
        isAdmin() ||
        // Cualquier usuario autenticado puede crear notificaciones b√°sicas (para sistema automatizado)
        (request.resource.data.keys().hasAll(['orderId', 'orderData']) &&
         request.resource.data.orderId is string &&
         request.resource.data.orderData is map) ||
        // Delivery persons pueden crear respuestas
        (isAnyDeliveryPerson() && 
         request.resource.data.keys().hasAll(['orderId', 'status']) &&
         isValidNotificationStatus(request.resource.data.status))
      );
      
      // ‚úèÔ∏è ACTUALIZACI√ìN: M√°s permisivo para el sistema
      allow update: if isAuthenticated() && (
        // Admin puede actualizar cualquier cosa
        isAdmin() ||
        // Delivery persons pueden actualizar su propia notificaci√≥n
        (isAnyDeliveryPerson() && 
         isValidNotificationStatus(request.resource.data.status)) ||
        // Sistema automatizado puede actualizar estado
        (request.resource.data.keys().hasAny(['status', 'expiresAt']) &&
         isValidNotificationStatus(request.resource.data.status))
      );
      
      allow delete: if isAuthenticated() && (
        isAdmin() || 
        // Permitir eliminaci√≥n para limpieza autom√°tica
        true
      );
      
      // üìã QUERIES: M√°s permisivo para el sistema
      allow list: if isAuthenticated() && (
        isAdmin() || 
        isAnyDeliveryPerson() ||
        // Permitir listado para monitoreo del sistema
        true
      );
    }

    // üÜï DELIVERY ZONES: Configuraci√≥n de zonas de entrega
    match /deliveryZones/{zoneId} {
      // üìñ LECTURA: P√∫blico para mostrar zonas disponibles
      allow read: if true;
      allow list: if true;
      
      // üìù ESCRITURA: Solo admin
      allow create, update, delete: if isAdmin();
    }

    // üÜï DELIVERY PERFORMANCE: M√©tricas y estad√≠sticas
    match /deliveryPerformance/{performanceId} {
      // üìñ LECTURA: Admin y delivery person propietario
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isAnyDeliveryPerson() && resource.data.deliveryPersonEmail == request.auth.token.email)
      );
      
      // üìù CREACI√ìN/ACTUALIZACI√ìN: Solo admin (sistema automatizado)
      allow create, update: if isAdmin();
      allow delete: if false;
      
      // üìã QUERIES: Admin y delivery persons
      allow list: if isAuthenticated() && (
        isAdmin() || 
        isAnyDeliveryPerson()
      );
    }

    // ‚úÖ DELIVERY RATINGS: Sistema de calificaciones seguro
    match /deliveryRatings/{ratingId} {
      // üìñ LECTURA: Admin, delivery person calificado, usuario que calific√≥
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isAnyDeliveryPerson() && request.auth.token.email == resource.data.deliveryPersonEmail) ||
        resource.data.userId == request.auth.uid
      );
      
      // üìù CREACI√ìN: Usuario autenticado con validaci√≥n
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['orderId', 'deliveryPersonEmail', 'userId', 'rating']) &&
        isValidRating(request.resource.data.rating);
      
      allow update, delete: if false; // Calificaciones inmutables
      
      // üìã QUERIES: Admin y delivery persons
      allow list: if isAuthenticated() && (isAdmin() || isAnyDeliveryPerson());
    }

    // üÜï SYSTEM NOTIFICATIONS: Notificaciones del sistema para admin
    match /systemNotifications/{notificationId} {
      // üìñ LECTURA: Solo admin
      allow read: if isAdmin();
      
      // üìù CREACI√ìN: Sistema automatizado (admin)
      allow create: if isAdmin();
      
      // ‚úèÔ∏è ACTUALIZACI√ìN: Admin puede marcar como le√≠do
      allow update: if isAdmin();
      
      allow delete: if isAdmin();
      allow list: if isAdmin();
    }

    // üÜï DELIVERY LOGS: Logs del sistema de delivery para debugging - M√ÅS PERMISIVO
    match /deliveryLogs/{logId} {
      // üìñ LECTURA: Admin y sistema automatizado
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isAutomatedSystem()
      );
      
      // üìù CREACI√ìN: Sistema automatizado, admin y delivery persons
      allow create: if isAuthenticated() && (
        isAdmin() ||
        isAnyDeliveryPerson() ||
        isAutomatedSystem()
      );
      
      allow update, delete: if false; // Logs inmutables
      allow list: if isAuthenticated() && (
        isAdmin() ||
        isAutomatedSystem()
      );
    }

    // ‚úÖ LOGS DE SEGURIDAD
    match /securityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // ‚úÖ SESIONES ACTIVAS
    match /activeSessions/{sessionId} {
      allow read, write: if isAuthenticated();
      allow create: if isAuthenticated();
    }

    // ‚úÖ RATE LIMITING
    match /rateLimits/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // ‚úÖ CONFIGURACI√ìN DEL SISTEMA
    match /systemConfig/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // ‚úÖ PRUEBAS DE CONEXI√ìN (TEMPORAL)
    match /connectionTest/{testId} {
      allow read, write: if isAuthenticated();
    }

    // ‚úÖ REGLA DE FALLBACK - DENEGACI√ìN EXPL√çCITA
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
