// 🔒 REGLAS DE FIRESTORE - SOLUCIÓN PARA INCREMENT() EN COMPRAS
// Versión 5.3 - Permite operaciones increment() para reducción de stock
// USAR INMEDIATAMENTE: Copia en Firebase Console → Firestore Database → Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ✅ FUNCIONES AUXILIARES DE SEGURIDAD
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && (
        request.auth.uid == "byRByEqdFOYxXOmUu9clvujvIUg1" ||
        (request.auth.token.email != null && request.auth.token.email == "hectorcobea03@gmail.com")
      );
    }

    function isMainDelivery() {
      return isAuthenticated() && (
        request.auth.token.email != null && request.auth.token.email == "hwcobena@espol.edu.ec" ||
        (request.auth.token.email != null && request.auth.token.email == "nexel2024@outlook.com")
      );
    }

    function isAnyDeliveryPerson() {
      return isAuthenticated() && (
        request.auth.token.email != null && (
          request.auth.token.email == "hwcobena@espol.edu.ec" ||
          request.auth.token.email == "nexel2024@outlook.com"
        )
      );
    }

    function isValidInventoryData(data) {
      return data.keys().hasAll(['productId', 'name', 'price', 'stock', 'isActive']) &&
             data.productId is number &&
             data.name is string &&
             data.price is number &&
             data.stock is number &&
             data.isActive is bool &&
             data.price >= 0 &&
             data.stock >= 0;
    }

    // ✅ USUARIOS: Seguridad robusta pero funcional
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if false;
      
      match /favourites/{favId} {
        allow read, write: if isOwner(userId);
      }
      
      match /purchases/{purchaseId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if isOwner(userId);
        allow update, delete: if false;
      }
    }

    // ✅ CARRITO DE COMPRAS
    match /carts/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      
      match /items/{itemId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
        allow create: if isAuthenticated() && request.auth.uid == userId &&
          request.resource.data.keys().hasAll(['productId', 'name', 'price', 'quantity']) &&
          request.resource.data.quantity > 0 &&
          request.resource.data.price >= 0;
      }
    }

    // 🛒 INVENTARIO: REGLAS ESPECÍFICAS PARA INCREMENT()
    match /inventory/{productId} {
      // 🔓 LECTURA PÚBLICA: Cualquiera puede ver productos
      allow read, list: if true;
      
      // 🔒 CREACIÓN/ELIMINACIÓN: Solo administradores
      allow create: if isAdmin() && isValidInventoryData(request.resource.data);
      allow delete: if isAdmin();
      
      // 🛒 ACTUALIZACIÓN: REGLAS ESPECÍFICAS PARA COMPRAS
      allow update: if isAdmin() || (
        // PERMITIR ESPECÍFICAMENTE OPERACIONES DE COMPRA
        isAuthenticated() &&
        // Simplificar validación para permitir increment()
        (
          // Permitir actualización de stock con increment()
          request.resource.data.keys().hasAny(['stock', 'isActive', 'lastUpdated']) ||
          // Permitir cualquier campo durante compra
          true
        )
      );
    }

    // ✅ PRODUCTOS: Lectura pública
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid;
        allow update: if isAuthenticated() && 
          resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() && 
          (resource.data.userId == request.auth.uid || isAdmin());
      }
    }

    // ✅ PEDIDOS DIARIOS: Para proceso de compra
    match /dailyOrders/{date} {
      allow read: if isAdmin();
      allow create, update: if isAuthenticated();
      allow delete: if false;
    }

    // ✅ DELIVERY ORDERS: Sistema completo
    match /deliveryOrders/{orderId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isAnyDeliveryPerson() ||
        resource.data.userId == request.auth.uid
      );
      
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'userName', 'userEmail', 'items', 'total', 'status']) &&
        request.resource.data.total > 0 &&
        request.resource.data.status == 'pending';
      
      allow update: if isAuthenticated() && (
        isAdmin() ||
        isAnyDeliveryPerson()
      );
      
      allow delete: if false;
      allow list: if isAuthenticated();
    }

    // ✅ DELIVERY RATINGS
    match /deliveryRatings/{ratingId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isAnyDeliveryPerson() && request.auth.token.email == resource.data.deliveryPersonEmail) ||
        resource.data.userId == request.auth.uid
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['orderId', 'deliveryPersonEmail', 'userId', 'rating']);
      
      allow update, delete: if false;
      allow list: if isAuthenticated() && (isAdmin() || isAnyDeliveryPerson());
    }

    // ✅ OTROS SERVICIOS
    match /securityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }

    match /activeSessions/{sessionId} {
      allow read, write: if isAuthenticated();
    }

    match /rateLimits/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    match /systemConfig/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /connectionTest/{testId} {
      allow read, write: if isAuthenticated();
    }

    // ✅ REGLA DE FALLBACK
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
