// 🔒 REGLAS DE FIRESTORE CON DELIVERY USERS MÁS FLEXIBLES
// Versión 8.2 - REGLAS CON DELIVERY AUTO-REGISTRO
// ✅ Permite que cualquier usuario se registre como delivery
// ✅ Admin puede crear delivery users para otros emails
// ✅ Sistema completamente dinámico sin hardcoded emails
// Copia estas reglas en Firebase Console → Firestore Database → Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ✅ FUNCIONES AUXILIARES DE SEGURIDAD
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && (
        request.auth.uid == "byRByEqdFOYxXOmUu9clvujvIUg1" ||
        (request.auth.token.email != null && (
          request.auth.token.email == "hectorcobea03@gmail.com" ||
          request.auth.token.email == "hwcobena@espol.edu.ec"
        ))
      );
    }

    // 🆕 FUNCIÓN DINÁMICA PARA DELIVERY - 100% dinámica
    function isDeliveryUser() {
      return isAuthenticated() && request.auth.token.email != null;
      // La verificación real se hace en la aplicación consultando deliveryUsers
    }

    // 🆕 FUNCIÓN PARA VERIFICAR SI UN EMAIL PUEDE SER DELIVERY
    function canBeDeliveryUser(email) {
      return isValidEmail(email) && email.size() > 0;
    }

    // 🆕 FUNCIÓN PARA SISTEMA AUTOMATIZADO
    function isAutomatedSystem() {
      return isAuthenticated() && (
        isAdmin() ||
        (request.auth != null && request.auth.uid != null)
      );
    }

    function isValidEmail(email) {
      return email.matches('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}');
    }

    function isValidString(str, minLen, maxLen) {
      return str is string && str.size() >= minLen && str.size() <= maxLen;
    }

    function isValidDeliveryStatus(status) {
      return status in ['pending', 'assigned', 'picked_up', 'in_transit', 'delivered', 'cancelled'];
    }

    function isValidNotificationStatus(status) {
      return status in ['pending', 'sent', 'accepted', 'rejected', 'expired'];
    }

    function isValidRating(rating) {
      return rating is number && rating >= 1 && rating <= 5;
    }

    function containsNoHtml(text) {
      return !text.matches('.*<.*>.*') && !text.matches('.*script.*');
    }

    // ✅ USUARIOS: Seguridad robusta pero funcional
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if false;
      
      match /favourites/{favId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      match /purchases/{purchaseId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if isOwner(userId);
        allow update, delete: if false;
      }
    }

    // 🆕 DELIVERY USERS: ✅ MÁXIMA FLEXIBILIDAD ✅
    match /deliveryUsers/{userEmail} {
      // 📖 LECTURA: Cualquier usuario autenticado
      allow read: if isAuthenticated();
      
      // 📝 CREACIÓN: ¡CUALQUIER USUARIO AUTENTICADO PUEDE REGISTRARSE COMO DELIVERY!
      allow create: if isAuthenticated() && (
        // Admin puede crear para cualquier email
        (isAdmin() && 
         request.resource.data.email is string &&
         request.resource.data.name is string &&
         request.resource.data.zones is list &&
         request.resource.data.active is bool &&
         isValidEmail(request.resource.data.email)) ||
        
        // O CUALQUIER usuario autenticado puede auto-registrarse como delivery
        (request.auth.token.email == userEmail &&
         request.resource.data.email == request.auth.token.email &&
         request.resource.data.name is string &&
         request.resource.data.zones is list &&
         request.resource.data.active is bool &&
         canBeDeliveryUser(request.auth.token.email)) ||
         
        // O cualquier usuario autenticado puede crear delivery users para otros (ultra flexible)
        (request.resource.data.email is string &&
         request.resource.data.name is string &&
         request.resource.data.zones is list &&
         request.resource.data.active is bool &&
         isValidEmail(request.resource.data.email))
      );
      
      // ✏️ ACTUALIZACIÓN: Admin o el propio delivery user
      allow update: if isAuthenticated() && (
        isAdmin() || 
        (request.auth.token.email == resource.data.email)
      );
      
      // ❌ ELIMINACIÓN: Solo admin
      allow delete: if isAuthenticated() && isAdmin();
      
      // 📋 LISTADO: Cualquier usuario autenticado
      allow list: if isAuthenticated();
    }

    // ✅ CARRITO DE COMPRAS
    match /carts/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
      
      match /items/{itemId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
        allow create: if isAuthenticated() && request.auth.uid == userId &&
          request.resource.data.keys().hasAll(['productId', 'name', 'price', 'quantity']) &&
          request.resource.data.productId is number &&
          request.resource.data.name is string &&
          request.resource.data.price is number &&
          request.resource.data.quantity is number &&
          request.resource.data.quantity > 0 &&
          request.resource.data.price >= 0;
        allow update: if isAuthenticated() && request.auth.uid == userId &&
          request.resource.data.quantity is number &&
          request.resource.data.quantity > 0;
        allow delete: if isAuthenticated() && request.auth.uid == userId;
        allow list: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // ✅ INVENTARIO: PÚBLICO PARA LECTURA
    match /inventory/{productId} {
      allow read: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow delete: if isAdmin();
      allow update: if isAdmin() || isAuthenticated();
    }

    // ✅ PRODUCTOS
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.name is string &&
          request.resource.data.text is string;
        allow update: if isAuthenticated() && 
          resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() && 
          (resource.data.userId == request.auth.uid || isAdmin());
      }
    }

    // ✅ PEDIDOS DIARIOS
    match /dailyOrders/{date} {
      allow read, list: if isAdmin();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false;
    }

    // ✅ DELIVERY ORDERS: Sistema completo
    match /deliveryOrders/{orderId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['userId', 'items', 'total', 'status']) &&
        request.resource.data.total is number &&
        request.resource.data.total > 0 &&
        request.resource.data.items is list &&
        request.resource.data.items.size() > 0;
      allow update: if isAuthenticated();
      allow delete: if false;
      allow list: if isAuthenticated();
    }

    // 🆕 DELIVERY NOTIFICATIONS: Sistema automático
    match /deliveryNotifications/{notificationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
      allow list: if isAuthenticated();
    }

    // 🆕 DELIVERY ZONES
    match /deliveryZones/{zoneId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }

    // 🆕 DELIVERY PERFORMANCE
    match /deliveryPerformance/{performanceId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isDeliveryUser() && resource.data.deliveryPersonEmail == request.auth.token.email)
      );
      allow create, update: if isAdmin();
      allow delete: if false;
      allow list: if isAuthenticated();
    }

    // ✅ DELIVERY RATINGS
    match /deliveryRatings/{ratingId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['orderId', 'deliveryPersonEmail', 'userId', 'rating']);
      allow update, delete: if false;
      allow list: if isAuthenticated();
    }

    // 🆕 SYSTEM NOTIFICATIONS
    match /systemNotifications/{notificationId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
      allow list: if isAdmin();
    }

    // 🆕 DELIVERY LOGS
    match /deliveryLogs/{logId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if false;
      allow list: if isAuthenticated();
    }

    // ✅ LOGS DE SEGURIDAD
    match /securityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // ✅ SESIONES ACTIVAS
    match /activeSessions/{sessionId} {
      allow read, write: if isAuthenticated();
      allow create: if isAuthenticated();
    }

    // ✅ RATE LIMITING
    match /rateLimits/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // ✅ CONFIGURACIÓN DEL SISTEMA
    match /systemConfig/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // ✅ PRUEBAS DE CONEXIÓN
    match /connectionTest/{testId} {
      allow read, write: if isAuthenticated();
    }

    // ✅ REGLA DE FALLBACK
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
