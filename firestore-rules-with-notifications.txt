// ðŸ”” REGLAS DE FIRESTORE ACTUALIZADAS CON NOTIFICACIONES
// VersiÃ³n 6.0 - Sistema automatizado de notificaciones de delivery
// Copia estas reglas en Firebase Console â†’ Firestore Database â†’ Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // âœ… FUNCIONES AUXILIARES DE SEGURIDAD
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && (
        request.auth.uid == "byRByEqdFOYxXOmUu9clvujvIUg1" ||
        (request.auth.token.email != null && request.auth.token.email == "hectorcobea03@gmail.com")
      );
    }

    function isMainDelivery() {
      return isAuthenticated() && (
        request.auth.token.email != null && (
          request.auth.token.email == "hwcobena@espol.edu.ec" ||
          request.auth.token.email == "nexel2024@outlook.com"
        )
      );
    }

    function isAnyDeliveryPerson() {
      return isAuthenticated() && (
        request.auth.token.email != null && (
          request.auth.token.email == "hwcobena@espol.edu.ec" ||
          request.auth.token.email == "nexel2024@outlook.com"
        )
      );
    }

    function isValidEmail(email) {
      return email.matches('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}');
    }

    function isValidString(str, minLen, maxLen) {
      return str is string && str.size() >= minLen && str.size() <= maxLen;
    }

    function isValidDeliveryStatus(status) {
      return status in ['pending', 'assigned', 'picked_up', 'in_transit', 'delivered'];
    }

    function isValidNotificationStatus(status) {
      return status in ['pending', 'accepted', 'expired'];
    }

    function isValidRating(rating) {
      return rating is number && rating >= 1 && rating <= 5;
    }

    // âœ… INVENTARIO: Acceso pÃºblico para lectura, admin para escritura
    match /inventory/{productId} {
      allow read: if true; // PÃºblico para mostrar productos disponibles
      allow create, update: if isAdmin() || isAuthenticated(); // Admin o usuarios autenticados para compras
      allow delete: if isAdmin();
    }

    // âœ… PRODUCTOS: Lectura pÃºblica, escritura solo admin
    match /products/{productId} {
      allow read: if true; // Productos pÃºblicos
      allow create, update, delete: if isAdmin();
      
      // âœ… COMENTARIOS: Reglas simplificadas y funcionales
      match /comments/{commentId} {
        allow read: if true; // Comentarios pÃºblicos
        
        // Crear comentario: Solo usuarios autenticados con validaciÃ³n mÃ­nima
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.name is string &&
          request.resource.data.text is string;
        
        // Actualizar: Solo el autor de su comentario
        allow update: if isAuthenticated() && 
          resource.data.userId == request.auth.uid;
        
        // Eliminar: Solo el autor o admin
        allow delete: if isAuthenticated() && 
          (resource.data.userId == request.auth.uid || isAdmin());
      }
    }

    // âœ… USUARIOS: GestiÃ³n de perfiles con subcolecciones
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if false; // No eliminar usuarios
      
      // âœ… FAVORITOS: Solo el dueÃ±o
      match /favourites/{favId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      // âœ… COMPRAS: Solo lectura y creaciÃ³n, no modificaciÃ³n
      match /purchases/{purchaseId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if isOwner(userId);
        allow update, delete: if false;
      }
    }

    // âœ… CARRITO DE COMPRAS: SincronizaciÃ³n entre dispositivos
    match /carts/{userId} {
      // Solo el usuario puede leer y escribir su propio carrito
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
      
      // Subcollection para items del carrito
      match /items/{itemId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
        allow create: if isAuthenticated() && request.auth.uid == userId &&
          request.resource.data.keys().hasAll(['productId', 'name', 'price', 'quantity']) &&
          request.resource.data.productId is number &&
          request.resource.data.name is string &&
          request.resource.data.price is number &&
          request.resource.data.quantity is number &&
          request.resource.data.quantity > 0 &&
          request.resource.data.price >= 0;
        allow update: if isAuthenticated() && request.auth.uid == userId &&
          request.resource.data.quantity is number &&
          request.resource.data.quantity > 0;
        allow delete: if isAuthenticated() && request.auth.uid == userId;
        allow list: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // âœ… PEDIDOS DIARIOS: Seguro pero funcional
    match /dailyOrders/{date} {
      allow read, list: if isAdmin();
      allow create: if isAuthenticated(); // Para proceso de compra
      allow update: if isAuthenticated(); // Para agregar Ã³rdenes durante compra
      allow delete: if false;
    }

    // âœ… DELIVERY ORDERS: Sistema completo con roles + creaciÃ³n durante compras
    match /deliveryOrders/{orderId} {
      // Lectura: Admin, delivery persons, y usuario dueÃ±o
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isAnyDeliveryPerson() ||
        resource.data.userId == request.auth.uid
      );
      
      // CreaciÃ³n: Durante compra con validaciÃ³n robusta
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'userName', 'userEmail', 'items', 'total', 'status']) &&
        request.resource.data.total is number &&
        request.resource.data.total > 0 &&
        request.resource.data.items is list &&
        request.resource.data.items.size() > 0 &&
        request.resource.data.status == 'pending'; // Solo se puede crear con status pending
      
      // ActualizaciÃ³n: Admin completo, delivery persons con restricciones
      allow update: if isAuthenticated() && (
        isAdmin() ||
        (isAnyDeliveryPerson() && isValidDeliveryStatus(request.resource.data.status))
      );
      
      allow delete: if false;
      
      // Queries: Permitir a todos los autenticados con filtros de seguridad
      allow list: if isAuthenticated();
    }

    // ðŸšš NUEVO: NOTIFICACIONES DE DELIVERY - Sistema automatizado
    match /deliveryNotifications/{notificationId} {
      // Lectura: Admin y delivery persons
      allow read: if isAuthenticated() && (isAdmin() || isAnyDeliveryPerson());
      
      // CreaciÃ³n: Solo durante proceso de compra automatizado
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['orderId', 'orderData', 'targetZones', 'status']) &&
        request.resource.data.status == 'pending' &&
        request.resource.data.targetZones is list &&
        request.resource.data.targetZones.size() > 0;
      
      // ActualizaciÃ³n: Solo para aceptar o expirar notificaciones
      allow update: if isAuthenticated() && (
        isAdmin() ||
        (isAnyDeliveryPerson() && 
         request.resource.data.status in ['accepted', 'expired'] &&
         (request.resource.data.status == 'expired' || 
          request.resource.data.acceptedBy == request.auth.token.email))
      );
      
      // EliminaciÃ³n: Solo admin para limpieza
      allow delete: if isAdmin();
      
      // Queries: Admin y delivery persons con filtros de zona
      allow list: if isAuthenticated() && (isAdmin() || isAnyDeliveryPerson());
    }

    // âœ… DELIVERY RATINGS: Sistema de calificaciones seguro
    match /deliveryRatings/{ratingId} {
      // Lectura: Admin, delivery person calificado, usuario que calificÃ³
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isAnyDeliveryPerson() && request.auth.token.email == resource.data.deliveryPersonEmail) ||
        resource.data.userId == request.auth.uid
      );
      
      // CreaciÃ³n: Usuario autenticado con validaciÃ³n
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['orderId', 'deliveryPersonEmail', 'userId', 'rating']) &&
        isValidRating(request.resource.data.rating);
      
      allow update, delete: if false; // Calificaciones inmutables
      
      // Queries: Admin y delivery persons
      allow list: if isAuthenticated() && (isAdmin() || isAnyDeliveryPerson());
    }

    // âœ… LOGS DE SEGURIDAD
    match /securityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // âœ… SESIONES ACTIVAS
    match /activeSessions/{sessionId} {
      allow read, write: if isAuthenticated();
      allow create: if isAuthenticated();
    }

    // âœ… CONFIGURACIÃ“N DEL SISTEMA
    match /systemConfig/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}
