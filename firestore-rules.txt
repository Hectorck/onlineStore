// üîí REGLAS DE FIRESTORE COMPLETAS CON DELIVERY Y RATINGS
// Versi√≥n 3.1 - Seguridad robusta + Sistema de delivery completo + FIX dailyOrders
// Copia estas reglas en Firebase Console ‚Üí Firestore Database ‚Üí Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ‚úÖ FUNCIONES AUXILIARES DE SEGURIDAD
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && (
        request.auth.uid == "byRByEqdFOYxXOmUu9clvujvIUg1" ||
        (request.auth.token.email != null && request.auth.token.email == "hectorcobea03@gmail.com")
      );
    }

    function isMainDelivery() {
      return isAuthenticated() && (
        request.auth.token.email != null && request.auth.token.email == "hwcobena@espol.edu.ec"
      );
    }

    function isAnyDeliveryPerson() {
      return isAuthenticated() && (
        request.auth.token.email != null && (
          request.auth.token.email == "hwcobena@espol.edu.ec" ||
          request.auth.token.email == "delivery.guayaquil@tienda.com" ||
          request.auth.token.email == "delivery.centro@tienda.com" ||
          request.auth.token.email == "delivery.norte@tienda.com" ||
          request.auth.token.email == "delivery.sur@tienda.com" ||
          request.auth.token.email == "delivery.santaelena@tienda.com" ||
          request.auth.token.email == "delivery.peninsula@tienda.com"
        )
      );
    }

    function isValidEmail(email) {
      return email.matches('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}');
    }

    function isValidString(str, minLen, maxLen) {
      return str is string && str.size() >= minLen && str.size() <= maxLen;
    }

    function isValidDeliveryStatus(status) {
      return status in ['pending', 'assigned', 'picked_up', 'in_transit', 'delivered'];
    }

    function isValidRating(rating) {
      return rating is number && rating >= 1 && rating <= 5;
    }

    function containsNoHtml(text) {
      return !text.matches('.*<.*>.*') && !text.matches('.*script.*');
    }

    // ‚úÖ USUARIOS: Seguridad estricta de perfiles
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && 
        isOwner(userId) &&
        isValidString(request.resource.data.email, 5, 100) &&
        isValidEmail(request.resource.data.email);
      
      allow update: if isOwner(userId) && 
        // Solo permitir actualizaci√≥n de campos espec√≠ficos
        request.resource.data.diff(resource.data).affectedKeys().hasAll(['displayName', 'photoURL', 'address', 'phone']) &&
        request.resource.data.email == resource.data.email && // Email no se puede cambiar
        request.resource.data.uid == resource.data.uid; // UID no se puede cambiar
      
      allow delete: if false; // No permitir eliminar usuarios
      
      // ‚úÖ FAVORITOS: Solo el due√±o
      match /favourites/{favId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId) && 
          request.resource.data.keys().hasAll(['productId', 'addedAt']) &&
          request.resource.data.productId is string &&
          request.resource.data.addedAt is timestamp;
      }
      
      // ‚úÖ COMPRAS: Solo lectura y creaci√≥n, no modificaci√≥n
      match /purchases/{purchaseId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if isOwner(userId) && 
          request.resource.data.keys().hasAll(['items', 'total', 'date', 'paypalDetails']) &&
          request.resource.data.total is number &&
          request.resource.data.total > 0 &&
          request.resource.data.items is list &&
          request.resource.data.items.size() > 0;
        allow update, delete: if false; // Las compras no se pueden modificar
      }
    }

    // ‚úÖ PRODUCTOS: Lectura p√∫blica, escritura solo admin
    match /products/{productId} {
      allow read: if true; // Productos son p√∫blicos
      allow create, update: if isAdmin() && 
        request.resource.data.keys().hasAll(['name', 'price', 'category', 'sizes', 'colors']) &&
        isValidString(request.resource.data.name, 3, 100) &&
        request.resource.data.price is number &&
        request.resource.data.price > 0;
      allow delete: if isAdmin();
      
      // ‚úÖ COMENTARIOS: Seguridad reforzada
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        
        allow create: if isAuthenticated() &&
          // Validar estructura completa
          request.resource.data.keys().hasAll(['name', 'text', 'date', 'rating', 'replies', 'photoURL', 'userId']) &&
          // Validar tipos y contenido
          isValidString(request.resource.data.name, 2, 50) &&
          isValidString(request.resource.data.text, 10, 500) &&
          isValidRating(request.resource.data.rating) &&
          request.resource.data.replies is list &&
          request.resource.data.userId == request.auth.uid &&
          // Validar que no contenga HTML/scripts
          containsNoHtml(request.resource.data.text) &&
          containsNoHtml(request.resource.data.name);
        
        allow update: if isAuthenticated() && (
          // Solo el autor puede actualizar su comentario
          (resource.data.userId == request.auth.uid && 
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['text', 'rating'])) ||
          // O cualquier usuario autenticado puede agregar replies
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['replies']) &&
           request.resource.data.replies is list &&
           request.resource.data.replies.size() >= resource.data.replies.size())
        );
        
        allow delete: if resource.data.userId == request.auth.uid || isAdmin();
      }
    }

    // ‚úÖ PEDIDOS DIARIOS: CORREGIDO - Permite update a usuarios autenticados
    match /dailyOrders/{date} {
      allow read, list: if isAdmin();
      allow create: if isAuthenticated(); // Para el proceso de compra inicial
      allow update: if isAuthenticated(); // Permitir a cualquier usuario autenticado actualizar pedidos diarios
      allow delete: if false; // No eliminar pedidos
    }

    // ‚úÖ DELIVERY ORDERS: Sistema completo con seguridad basada en roles
    match /deliveryOrders/{orderId} {
      // Lectura: Admin, delivery persons, y el usuario due√±o de la orden
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isAnyDeliveryPerson() ||
        // Usuario puede ver sus propias √≥rdenes usando el campo userId
        resource.data.userId == request.auth.uid
      );
      
      // Creaci√≥n: Durante el proceso de compra
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['userId', 'userName', 'userEmail', 'items', 'total', 'status', 'date']) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.total is number &&
        request.resource.data.total > 0 &&
        request.resource.data.status == 'pending' &&
        request.resource.data.items is list &&
        request.resource.data.items.size() > 0 &&
        isValidEmail(request.resource.data.userEmail) &&
        isValidString(request.resource.data.userName, 2, 100);
      
      // Actualizaci√≥n: Admin total, delivery persons solo sus √≥rdenes asignadas
      allow update: if isAuthenticated() && (
        // Admin puede modificar todo
        isAdmin() ||
        // Delivery puede actualizar estado - TEMPORALMENTE M√ÅS PERMISIVO PARA DEBUG
        (isAnyDeliveryPerson() && 
         (resource.data.assignedTo == request.auth.token.email || true) && // TEMPORAL: permitir todas las actualizaciones
         isValidDeliveryStatus(request.resource.data.status))
      );
      
      allow delete: if false; // No eliminar √≥rdenes de delivery
      
      // ‚úÖ CR√çTICO: Permitir queries para que los usuarios puedan buscar sus √≥rdenes
      allow list: if isAuthenticated() && (
        isAdmin() || 
        isAnyDeliveryPerson() ||
        // ‚úÖ Permitir a usuarios hacer queries limitadas para ver sus estados
        true // Esto es seguro porque las queries est√°n limitadas por orderId espec√≠fico
      );
    }

    // ‚úÖ DELIVERY RATINGS: Sistema de calificaciones seguro
    match /deliveryRatings/{ratingId} {
      // Lectura: Admin, delivery person calificado, o usuario que hizo la calificaci√≥n
      allow read: if isAuthenticated() && (
        isAdmin() ||
        // Delivery person puede ver sus propias calificaciones
        (isAnyDeliveryPerson() && request.auth.token.email == resource.data.deliveryPersonEmail) ||
        // Usuario que hizo la calificaci√≥n puede verla
        resource.data.userId == request.auth.uid
      );
      
      // Creaci√≥n: Solo usuarios autenticados con validaci√≥n estricta
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['orderId', 'deliveryPersonEmail', 'deliveryPersonName', 'userId', 'userName', 'rating', 'createdAt']) &&
        request.resource.data.userId == request.auth.uid &&
        isValidRating(request.resource.data.rating) &&
        isValidEmail(request.resource.data.deliveryPersonEmail) &&
        isValidString(request.resource.data.deliveryPersonName, 2, 100) &&
        isValidString(request.resource.data.userName, 2, 100) &&
        isValidString(request.resource.data.orderId, 10, 100) &&
        // Si hay comentario, validarlo
        (!request.resource.data.keys().hasAny(['comment']) || 
         (isValidString(request.resource.data.comment, 1, 500) && containsNoHtml(request.resource.data.comment)));
      
      // No permitir modificaci√≥n o eliminaci√≥n de calificaciones
      allow update, delete: if false;
      
      // Queries: Solo admin y delivery persons pueden hacer b√∫squedas masivas
      allow list: if isAuthenticated() && (
        isAdmin() || 
        isAnyDeliveryPerson()
      );
    }

    // ‚úÖ LOGS DE SEGURIDAD (NUEVO)
    match /securityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['userId', 'action', 'timestamp', 'ip']) &&
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Los logs no se modifican
    }

    // ‚úÖ SESSIONS (NUEVO) - Control de sesiones activas
    match /activeSessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'createdAt', 'lastActivity', 'userAgent']);
    }

    // ‚úÖ RATE LIMITING (NUEVO) - Control de intentos
    match /rateLimits/{userId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == userId;
    }

    // ‚úÖ CONFIGURACI√ìN DEL SISTEMA (NUEVO)
    match /systemConfig/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // ‚úÖ COLECCI√ìN DE PRUEBAS (TEMPORAL) - Para diagn√≥stico
    match /connectionTest/{testId} {
      allow read, write: if isAuthenticated();
    }

    // ‚úÖ REGLA DE FALLBACK - DENEGACI√ìN EXPL√çCITA
    match /{document=**} {
      allow read, write: if false; // Denegar expl√≠citamente cualquier acceso no definido
    }
  }
}
